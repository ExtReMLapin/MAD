--[=[
 o-----------------------------------------------------------------------------o
 |
 | command module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide root object for commands

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local object                                                      in MAD
local is_nil, is_string, is_table, is_callable                    in MAD.typeid
local assertf                                                     in MAD.utility

-- root object ----------------------------------------------------------------o

local _cmd = {}

local command = object 'command' { kind='command', [_cmd]=true }

local function is_command (a)
  return is_table(a) and not is_nil(a[_cmd])
end

-- implementation -------------------------------------------------------------o

local function exec (a)
  local exec_mm = a:raw_get'exec'
  if exec_mm == false then
    a.exec = nil
    return a
  elseif is_callable(exec_mm) then
    a:set_metamethods({ __exec = exec_mm }, true)
    a.exec = nil
    return a
  end
  return rawget(getmetatable(a), '__exec')(a)
end

command :set_metamethods {
  __init  = \s -> exec(s),
  __exec := error("invalid command (missing exec or __exec definition)", 2),
} :set_readonly()

-- env ------------------------------------------------------------------------o

MAD.typeid.is_command = is_command

-- end ------------------------------------------------------------------------o
return { command = command }
