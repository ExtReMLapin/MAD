--[=[
 o-----------------------------------------------------------------------------o
 |
 | MADX module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide basic compatibility with MADX sequences and optics files

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local object, warn                                                in MAD
local assertf, openfile                                           in MAD.utility
local bind1st                                                     in MAD.gfunc
local is_nil, is_number, is_string, is_callable, is_instanceOf    in MAD.typeid

assert(is_nil(MADX), "MADX environment already defined")

-- TODO: handle default value of element attribute defined in MADX dict
--   "elm: class, attr;" or "elm, attr;" where no value is specified for attr

-- implementation -------------------------------------------------------------o

local cmt = { ['//'] = '--', ['/*'] = '--[[', ['*/'] = ']]', }

local function convert_comments (line)
  return string.gsub(line, '([/*][/*])', cmt)
end

local tok = { real='', const='', shared='', REAL='', CONST='', SHARED='' }

local function convert_tokens (line)
  line = string.gsub(line, '(%w+) ', tok)
  line = string.gsub(line, '->', '.')
  line = string.gsub(line, '%%', '.')
  line = string.gsub(line, '&', ' ')
  return line
end

local function convert_name (env, str)
  local c = string.sub(str,1,1)
  if c == '"' or c == "'" then
    assertf(c == string.sub(str,-1), "unterminated string, line %d", env.lin)
    return str
  else
    return string.lower(string.gsub(str, '([.$])', '_'))
  end
end

local function convert_names (env, str)
  return (string.gsub(str, "(['\"]?[%a_][%w%._$]*['\"]?)", bind1st(convert_name, env)))
end

local function convert_eref (str)
  str = string.gsub(str, "[Ff][Rr][Oo][Mm]%s*=%s*([%a_][%w%._$]*)", "from='%1'")
  str = string.gsub(str, "[Rr][Ee][Ff][Pp][Oo][Ss]%s*=%s*([%a_][%w%._$]*)", "refpos='%1'")
  return str
end

-- variable -------------------------------------------------------------------o
-- var = expr;
-- var := expr;

               --   [1]  [2]             [3]  [4]  [5]  [6]
local variable = "^(%s*)([%a_][%w%._$]*)(%s*)(:?=)(%s*)([^;]*);"

local function convert_variable (env, line, cap)
  cap[2] = convert_name (env, cap[2])
  cap[6] = convert_names(env, cap[6])
  assertf(env.cur == 0, "unsupported variable %s assignment in %s, line %d",
    cap[2], env[env.cur], env.lin)
  if cap[4] == ':=' then
    cap[4] = '=\\ '
    if string.sub(cap[6],1,1) == '(' then
      cap[6] = '(' .. cap[6] .. ')'
    end
  end
  return table.concat( cap )
end

-- command --------------------------------------------------------------------o
-- cmd, attr-list;
-- cmd attr-list;

              --   [1]  [2]             [3]       [4]
local command = "^(%s*)([%a_][%w%._$]*)([^,;%a_]*)()"
local command_attr = "(%s*)([^;]*);"

local function convert_command (env, line, cap)
  local cmd = convert_name(env, cap[2])
  if cmd == 'endsequence' then
    env.cur = 0
    return '}'
  end
  local c = string.sub(line,cap[4],cap[4])
  if c == ',' or c == ';' then
    cap[4] = cap[4]+1
  end

  local sid, spc, pfx, opn, clo = env.elm[cmd] or env.seq[cmd]
  if c ~= ';' and sid then  -- element update
    spc, cap[3] = string.match(line, command_attr, cap[4])
    if env.cur == 0 then                -- outside sequence definition, update
      pfx = sid > 0 and env[sid] .. "['" .. cap[2] .. "'] " or cmd
      opn, cap[3], clo = ':setv { ', convert_names(env, cap[3] or ''), ' }'
    elseif env.seq[cmd] then            -- sharing sequence (keep only at, from, refpos)
      if env.wrn then
        warn("%03d: sequence updated in %s: %s", env.lin, env[env.cur], cap[2])
      end
      pfx = cap[2]
--      pfx = "sequence '" .. cap[2] .. "' "
      opn, cap[3], clo = '{ ', convert_names(env, convert_eref(cap[3] or '')), ', shared=true },'
--      opn, cap[3], clo = '{ '..cmd..', ', convert_names(convert_eref(cap[3] or '')), ' },'
    else                                -- sharing element (keep only at, from)
      if env.wrn then
        warn("%03d: element updated in %s: %s", env.lin, env[env.cur], cap[2])
      end
      pfx = cap[2]
--      pfx = env.cls[cmd] .. " '" .. cap[2] .. "' "
      opn, cap[3], clo = '{ ', convert_names(env, convert_eref(cap[3] or '')), ', shared=true },'
    end
    return string.format("%s%s %s%s%s%s", cap[1],pfx, opn,spc or '',cap[3],clo)
  else                                    -- command, ignored
    line = '-- ' .. line
  end
  return line
end

-- element --------------------------------------------------------------------o
-- elem:class, attr-list;
-- elem:class attr-list;

              --   [1]  [2]                    [3]             [4]       [5]
local element = "^(%s*)([%a_][%w%._$]*)%s*:%s*([%a_][%w%._$]*)([^,=;%a_]*)()"
local element_attr = "(%s*)([^;]*);"
local element_line = "(%s*)(%b())%s*;"

local function convert_line (str)
  local cap = string.sub(str, 2, -2)
  if cap ~= '' then cap = '{ ' .. cap end -- closing '}' is appened
  return cap
end

local function convert_element (env, line, cap)
  local nam = convert_name(env, cap[2])
  local cmd = convert_name(env, cap[3])
  local sid, spc, clo, pfx = env.elm[nam]
  if cmd == 'sequence' then -- sequence
    assertf(env.cur == 0, "invalid sequence %s definition in %s, line %d",
            cap[2], env[env.cur], env.lin)
    pfx, clo     = nam .. ' = ', ','
    env[#env+1]  = nam -- cap[2]
    env.seq[nam] = #env
    env.cur      = #env
  elseif env.cur == 0 then  -- class
    pfx, clo     = nam .. ' = ', ' }'
    env.cls[nam] = cmd
    env.elm[nam] = 0
  else                      -- element
    pfx, clo     = '', ' },'
    if sid then
      if env.wrn then
        if env.cur == 0 then
          warn("%03d: element redefined, ignored: %s", env.lin, cap[2])
        else
          warn("%03d: element redefined in %s, ignored: %s",
               env.lin, env[env.cur], cap[2])
        end
      end
    else
      env.cls[nam] = cmd
      env.elm[nam] = env.cur
    end
  end
  local c = string.sub(line,cap[5],cap[5])
  if c == ',' or c == ';' then
    cap[5] = cap[5]+1
  end
  if c == '=' then -- line -- TODO: line arguments
    assertf(cmd == 'line', "'line' definition expected, line %d", env.lin)
    spc, cap[4] = string.match(line, element_line, cap[5])
    cap[4] = convert_names(env, convert_line(cap[4] or ''))
  elseif c ~= ';' then -- attribute
    assertf(cmd ~= 'line', "unexpected 'line' definition, line %d", env.lin)
    spc, cap[4] = string.match(line, element_attr, cap[5])
    cap[4] = convert_names(env, convert_eref(cap[4] or ''))
  else
    cap[4] = ''
  end
  return string.format("%s%s%s '%s' %s{ %s%s",
                       cap[1], pfx, cmd, cap[2], spc or '', cap[4], clo)
end

-- statement ------------------------------------------------------------------o

local capf = \i,j,... -> {...}
local function convert_statements (env, line)
  local cap
  cap = capf( string.find(line, variable) )
  if #cap > 0 then return convert_variable(env, line, cap) end
  cap = capf( string.find(line, element) )
  if #cap > 0 then return convert_element (env, line, cap) end
  cap = capf( string.find(line, command) )
  if #cap > 0 then return convert_command (env, line, cap) end
  return line
end

--[[
  env content:
  ------------
  [idx]    = seq_name : list of sequences
  cur      = seq_idx  : current sequence index (0 -> not in seq)
  elm[str] = seq_idx  : element sequence index (0 -> elm is a class)
  seq[str] = seq_idx  : sequence index         (from name)
  cls[elm] = cls_name : class of element
]]--

local function load2madx (madx, src, dst)
  assert(madx == MADX or is_instanceOf(madx, MADX), "invalid MADX environment")

  -- compile directly in memory (no translation)
  if is_callable(src) or is_string(src) and string.sub(src, -4) == '.mad' then
    MADX:load_env(src)
    return
  end

  madx = madx or MADX

  local env = { cur=0, seq={}, elm={}, cls={}, lin=0,
                wrn=madx.option.warn, madx=madx }

  -- load file
  local inf = openfile(src, 'r')
  local out = {
    string.format("-- Generated by MAD %s %s", MAD.env.version, os.date()),
  }

  for line in inf:lines() do
    env.lin = env.lin + 1
    line = convert_comments   (line)
    line = convert_tokens     (line)
    line = convert_statements (env, line)
    out[#out+1] = line
  end
  if is_string(src) then inf:close() else inf:flush() end

  -- save to file
  if dst then
    local outf = openfile(dst, 'w', '.mad')
    for i,s in ipairs(out) do outf:write(s, '\n') end
    if is_string(dst) then outf:close() else outf:flush() end
  end

  -- compile in memory
  MADX:load_env(assert( load( table.concat(out,'\n') ) ))

  env, out = nil, nil
  collectgarbage() -- mark and sweep
  collectgarbage() -- release memory
end

-- MADX helpers ---------------------------------------------------------------o

local sinc        in MAD.gmath

--[[
l_arc  = A*R
l_cord = 2*R*sin(A/2)
l_cord = sinc(A/2)*l_arc
]]

-- from cord to arc (madx default, rbarc = true)
local cord2arc = function (e)
  local l = e:var_raw 'l'
  if is_callable(l)
  then e.l = \s l(s)/sinc(0.5*s.angle)
  else e.l = \s l   /sinc(0.5*s.angle)
  end
end

-- from arc to cord
local arc2cord = function (e)
  local l = e:var_raw 'l'
  if is_callable(l)
  then e.l = \s l(s)*sinc(0.5*s.angle)
  else e.l = \s l   *sinc(0.5*s.angle)
  end
end

-- MADX environment -----------------------------------------------------------o

local MADX = object 'MADX' {
  option = {
    debug=false, info=false, warn=true, rbarc=true,
  },
}

-- load madx definition
MADX:set_methods {
  load = load2madx,
}

-- math functions, see mad_dict.c from MAD-X source
MADX:set_methods {
  abs     = math.abs,
  sqrt    = math.sqrt,
  exp     = math.exp,
  log     = math.log,
  log10   = math.log10,
  sin     = math.sin,
  cos     = math.cos,
  tan     = math.tan,
  sinh    = math.sinh,
  cosh    = math.cosh,
  tanh    = math.tanh,
  asin    = math.asin,
  acos    = math.acos,
  atan    = math.atan,
  asinh   = MAD.gmath.asinh,
  acosh   = MAD.gmath.acosh,
  atanh   = MAD.gmath.atanh,
  ranf    = MAD.gmath.rand,
  gauss   = MAD.gmath.randn,
  tgauss  = MAD.gmath.randtn,
  poisson = MAD.gmath.randp,
  floor   = math.floor,
  ceil    = math.ceil,
  round   = MAD.gmath.round,
  frac    = MAD.gmath.frac,
  fact    = MAD.gmath.fact,
  erf     = MAD.gmath.erf,
  erfc    = MAD.gmath.erfc,
  sinc    = MAD.gmath.sinc,

-- extra functions
  rbarc    = cord2arc,
  cord2arc = cord2arc,
  arc2cord = arc2cord,
}

-- constants
MADX:set_variables(MAD.constant)

-- elements
MADX:set_variables(MAD.element)

local multipole, kicker, collimator in MAD.element

-- backward compatibility (survey)
-- note: only Mutipole knl[1] should affect the global frame,
--       other thin elements should not change the global frame.
MADX.multipole = multipole {}                            -- override by a child
MADX.multipole.angle = \s -> s.knl and s.knl[1] or 0     -- not in MAD multipole

-- aliases (not in MAD)
MADX.tkicker     = kicker     'tkicker'     { kind='tkicker' }
MADX.rcollimator = collimator 'rcollimator' { }
MADX.ecollimator = collimator 'ecollimator' { }

-- strings as identifiers (should be detected by parser?)
do
  local str2id = {
    'centre' ,
    'circle' ,
    'ellipse',
    'entry'  ,
    'exit'   ,
  }
  for _,v in ipairs(str2id) do MADX[v] = v end
end

-- undefined variables have value zero
local  type   = type
local  index  = getmetatable(MADX).__index -- catch from parent
local windex  = \s,k =>
  local v = index(s,k)
  if type(v) ~= nil then return v end
  if s.option.warn then warn("undefined variable used (zero): " .. k) end
  _G.MADX[k] = 0
  return 0
end

MADX:set_metamethods ({ __index=windex }, true) :set_readonly()

-- global MADX is a read-write child.
_G.MADX = MADX(nil, table.new(0,1000))

-- end ------------------------------------------------------------------------o
return { MADX = _G.MADX }
