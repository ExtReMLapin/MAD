--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic functional module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of generic functions for functional programming.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local is_nil, is_function, is_table, is_callable, wprotect,
      set_concept, concept                                         in MAD.typeid
local not_scannable, not_extendable, not_mutable                   in concept

local rawget, select = rawget, select

-- implementation -------------------------------------------------------------o

local gfunc = {

  ident   = \... -> ...,             -- identity
  narg    = \... -> select('#',...), -- number of arguments
  fnil    = \    -> nil,             -- functional nil
  ftrue   = \    -> true,            -- functional true
  ffalse  = \    -> false,           -- functional false
  fnone   = \    -> (),              -- do nothing, forget argument(s)
  first   = \a   -> a,               -- 1st argument only
  second  = \a,b -> b,               -- 2nd argument only
  swap    = \a,b -> (b,a),           -- swap #1 and #2 arguments, discard others
  swapv   = \a,b,... -> (b,a,...),   -- swap #1 and #2 arguments, keep others

}

-- functors

local _id = {} -- itdentity

-- forward declarations
local fct_mt, fct_mtc, fct_mtb1, fct_mtb2, fct_mtb12

function gfunc.functor (f)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({__fun=f}, fct_mt)
end

function gfunc.compose (f, g)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  assert(is_callable(g), "invalid argument #2 (callable expected)")
  return setmetatable({__fun=f, __fun2=g}, fct_mtc)
end

function gfunc.bind1st (f, a)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({__fun=f, __arg=a}, fct_mtb1)
end

function gfunc.bind2nd (f, b)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({__fun=f, __arg2=b}, fct_mtb2)
end

function gfunc.bind2st (f, a, b)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({__fun=f, __arg=a, __arg2=b}, fct_mtb12)
end

function gfunc.is_functor (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__obj == _id
end

local str = \s -> string.format("functor: %p", s)

fct_mt = set_concept({
  __obj       = _id,
  __pow       = gfunc.compose,
  __call      = \s,... -> s.__fun(...),
  __index     = \s,k   -> s.__fun(k),
  __tostring  = str,
}, not_scannable + not_extendable + not_mutable)

fct_mtc = set_concept({
  __obj       = _id,
  __pow       = gfunc.compose,
  __call      = \s,... -> s.__fun(s.__fun2(...)),
  __index     = \s,k   -> s.__fun(s.__fun2(k)),
  __tostring  = str,
}, not_scannable + not_extendable + not_mutable)

fct_mtb1 = set_concept({
  __obj       = _id,
  __pow       = gfunc.compose,
  __call      = \s,... -> s.__fun(rawget(s, '__arg'), ...),
  __index     = \s,k   -> s.__fun(rawget(s, '__arg'), k),
  __tostring  = str,
}, not_scannable + not_extendable + not_mutable)

fct_mtb2 = set_concept({
  __obj       = _id,
  __pow       = gfunc.compose,
  __call      = \s,a,... -> s.__fun(a, rawget(s, '__arg2'), ...),
  __index     = \s,k     -> s.__fun(k, rawget(s, '__arg2')),
  __tostring  = str,
}, not_scannable + not_extendable + not_mutable)

fct_mtb12 = set_concept({
  __obj       = _id,
  __pow       = gfunc.compose,
  __call      = \s,... -> s.__fun(rawget(s,'__arg'), rawget(s,'__arg2'), ...),
  __index     = \s,k   -> s.__fun(rawget(s,'__arg'), rawget(s,'__arg2'), k),
  __tostring  = str,
}, not_scannable + not_extendable + not_mutable)

-- bottom definition uses metatables (must be after)
gfunc.bottom = gfunc.functor(gfunc.ident)
gfunc._      = gfunc.bottom -- alias

-- env ------------------------------------------------------------------------o

MAD.typeid.is_functor = gfunc.is_functor

gfunc = wprotect(setmetatable(gfunc, {__tostring := "MAD.gfunc"}))

-- end ------------------------------------------------------------------------o
return { gfunc = gfunc }
