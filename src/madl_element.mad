--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local object                                       in MAD
local is_nil, is_number, is_table, is_object       in MAD.typeid
local test_flag, set_flag, clear_flag              in object

-- root object ----------------------------------------------------------------o

local Element = object 'element' {
  kind='element', is_element=true, l=0, angle=0, tilt=0,              -- default
  l_mag=\s s.l, l_elec=\s s.l, l_rad=\s s.l, l_mech=\s s.l,           -- aliases
}

local _id = {}

local function is_element (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__elem == _id
end

-- flags ----------------------------------------------------------------------o

M.flags = {
  implicit = Element.first_free_flag,               -- inherited from object
  selected = Element.first_free_flag+1,
  observe  = Element.first_free_flag+2,
  layout   = Element.first_free_flag+3,
  layangle = Element.first_free_flag+4,
}

Element.first_free_flag = Element.first_free_flag+5 -- overridden in Element

-- members --------------------------------------------------------------------o

local implicit, selected in M.flags

Element :set_methods {
  is_implicit = \s   ->  test_flag(s,      implicit),
  is_selected = \s,f ->  test_flag(s, f or selected),
  select      = \s,f ->   set_flag(s, f or selected),
  deselect    = \s,f -> clear_flag(s, f or selected),

} :set_metamethods ({
  -- identity
  __elem = _id,
  -- concatenation
  __add = \a,b -> M.bline { a, b },
  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a end
                  return M.bline { __rep=a, b } end,
  -- reflection
  __unm = \a -> M.bline { __rep=-1, a },
  -- dump
  __tostring = \s -> string.format("%s: '%s' %p", s.kind, s.__id, s),

}, true) :set_readonly()

-- taxonomy -------------------------------------------------------------------o

-- frames elements

M.   thin_element = Element    'thin_element'  { is_thin  = true } -- thinonly
M.  drift_element = Element   'drift_element'  { is_drift = true } -- thickonly
M.  thick_element = Element   'thick_element'  { is_thick = true } -- method
M.  extra_element = Element   'extra_element'  { is_extra = true }

-- assembler elements

M.sequence    = M.extra_element 'Sequence'     { }
M.assembly    = M.extra_element 'Assembly'     { }
M.bline       = M.extra_element 'BLine'        { }

-- factory

M.drift       = M.drift_element 'drift'        { }
M.monitor     = M.drift_element 'monitor'      { }
M.collimator  = M.drift_element 'collimator'   { }
M.instrument  = M.drift_element 'instrument'   { }
M.placeholder = M.drift_element 'placeholder'  { }

M.sbend       = M.thick_element 'sbend'        { } -- polar   , k0
M.combined    = M.thick_element 'combined'     { } -- polar   , k0+k1
M.rbend       = M.thick_element 'rbend'        { } -- straight, k0
M.quadrupole  = M.thick_element 'quadrupole'   { } -- straight, k0+k1
M.sextupole   = M.thick_element 'sextupole'    { }
M.octupole    = M.thick_element 'octupole'     { }
M.decapole    = M.thick_element 'decapole'     { }
M.dodecapole  = M.thick_element 'dodecapole'   { }
M.kicker      = M.thick_element 'kicker'       { }
M.solenoid    = M.thick_element 'solenoid'     { }
M.wiggler     = M.thick_element 'wiggler'      { }
M.elseparator = M.thick_element 'elseparator'  { }
M.rfcavity    = M.thick_element 'rfcavity'     { }
M.twcavity    = M.thick_element 'twcavity'     { }

M.rfmultipole = M.thin_element  'rfmultipole'  { }
M.multipole   = M.thin_element  'multipole'    { }
M.special     = M.thin_element  'special'      { }
M.patch       = M.thin_element  'patch'        { }

-- special elements

M.marker      = M.special       'marker'       { }
M.slink       = M.special       'slink'        { }

-- patch elements

M.xrotation   = M.patch         'xrotation'    { }
M.yrotation   = M.patch         'yrotation'    { }
M.srotation   = M.patch         'srotation'    { }
M.translate   = M.patch         'translate'    { }
M.changeref   = M.patch         'changeref'    { }
M.changedir   = M.patch         'changedir'    { }
M.changenrj   = M.patch         'changenrj'    { }

-- specializations

M.crabcavity  = M.rfmultipole   'crabcavity'   { }

M.hkicker     = M.kicker        'hkicker'      { }
M.vkicker     = M.kicker        'vkicker'      { }

M.hmonitor    = M.monitor       'hmonitor'     { }
M.vmonitor    = M.monitor       'vmonitor'     { }

-- build kind and is_xxx keys of elements -------------------------------------o

for k,e in pairs(M) do
  if is_object(e) then
    assert(is_element(e), "non-element '"..e.__id.."'detected in Element")
    if k ~= string.lower(e.__id) then
      error("inconsistent element kind '"..k.."' detected in '".. e.__id .."'")
    end
    e.kind, e['is_'..k] = k, true
  end
end

-- attributes aliases ---------------------------------------------------------o

M. kicker.knl = \s -> { -(s.hkick or 0) }
M. kicker.ksl = \s -> {   s.vkick or 0  }
M.hkicker.knl = \s -> { -(s. kick or s.hkick or 0) }
M.vkicker.ksl = \s -> {   s. kick or s.vkick or 0  }

-- env ------------------------------------------------------------------------o

local is_implicit, is_selected in Element

MAD.typeid.is_element  = is_element
MAD.typeid.is_implicit = is_implicit
MAD.typeid.is_selected = is_selected

-- end ------------------------------------------------------------------------o
return { element = M }

--[[ TODO?
ELEMENT DISPLAY

local function show_inheritance(self, depth, sep)
  show_list(self, element_fields, sep)
  if depth > 0 and not rawget(self:class(), 'kind') then
    show_inheritance(self:class(), depth-1)
  end
end

local function show_properties(self, disp, sep)
  local show = type(disp) == 'number' and show_inheritance or show_list
  show(self, disp, sep)
end

local printf in MAD.utility

function MT:show(disp)
  printf("   %-25s '%s' { at= %g, ", self:class().name ...)
  show_properties(self, disp)
  io.write(' },\n')
end

function MT:show_madx(disp)
  printf("  %-25s:%s, at= %g, ", self.name, self:class().name, self.spos)
  show_properties(self, disp, {'= ', ', '})
  io.write(';\n')
end
]]



