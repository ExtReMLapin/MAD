--[=[
 o-----------------------------------------------------------------------------o
 |
 | Complex number module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide full set of functions and operations on complex numbers

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'

local typeof, istype   in ffi
local abs, ceil, floor in math

local _C                                                          in MAD
local frac, trunc, round                                          in MAD.gmath
local is_number, is_integer, is_string, has_method                in MAD.typeid
local strnum, num2str, strtrim                                    in MAD.utility

-- FFI type constructors
local complex = typeof 'complex'

-- tmp for returned values
local cres = ffi.new 'complex[1]'

-- implementation -------------------------------------------------------------o

local type = type

local is_complex = \a ->                         istype(complex, a)
local is_scalar  = \a -> type(a) == 'number' or  istype(complex, a)

-- generic functions
M.ceil  = \x -> complex(ceil (x.re), ceil (x.im))
M.floor = \x -> complex(floor(x.re), floor(x.im))
M.frac  = \x -> complex(frac (x.re), frac (x.im))
M.trunc = \x -> complex(trunc(x.re), trunc(x.im))
M.round = \x -> complex(round(x.re), round(x.im))

M.abs   = \x -> _C.mad_cnum_abs_r   (x.re, x.im)
M.sqrt  = \x => _C.mad_cnum_sqrt_r  (x.re, x.im, cres) return   cres[0] end
M.exp   = \x => _C.mad_cnum_exp_r   (x.re, x.im, cres) return   cres[0] end
M.log   = \x => _C.mad_cnum_log_r   (x.re, x.im, cres) return   cres[0] end
M.log10 = \x => _C.mad_cnum_log10_r (x.re, x.im, cres) return   cres[0] end

M.sin   = \x => _C.mad_cnum_sin_r   (x.re, x.im, cres) return   cres[0] end
M.cos   = \x => _C.mad_cnum_cos_r   (x.re, x.im, cres) return   cres[0] end
M.tan   = \x => _C.mad_cnum_tan_r   (x.re, x.im, cres) return   cres[0] end
M.cot   = \x => _C.mad_cnum_tan_r   (x.re, x.im, cres) return 1/cres[0] end
M.sinh  = \x => _C.mad_cnum_sinh_r  (x.re, x.im, cres) return   cres[0] end
M.cosh  = \x => _C.mad_cnum_cosh_r  (x.re, x.im, cres) return   cres[0] end
M.tanh  = \x => _C.mad_cnum_tanh_r  (x.re, x.im, cres) return   cres[0] end
M.coth  = \x => _C.mad_cnum_tanh_r  (x.re, x.im, cres) return 1/cres[0] end

M.asin  = \x => _C.mad_cnum_asin_r  (x.re, x.im, cres) return   cres[0] end
M.acos  = \x => _C.mad_cnum_acos_r  (x.re, x.im, cres) return   cres[0] end
M.atan  = \x => _C.mad_cnum_atan_r  (x.re, x.im, cres) return   cres[0] end
M.acot  = \x => x = 1/x
                _C.mad_cnum_atan_r  (x.re, x.im, cres) return   cres[0] end
M.asinh = \x => _C.mad_cnum_asinh_r (x.re, x.im, cres) return   cres[0] end
M.acosh = \x => _C.mad_cnum_acosh_r (x.re, x.im, cres) return   cres[0] end
M.atanh = \x => _C.mad_cnum_atanh_r (x.re, x.im, cres) return   cres[0] end
M.acoth = \x => x = 1/x
                _C.mad_cnum_atanh_r (x.re, x.im, cres) return   cres[0] end

M.sinc  = \x => _C.mad_cnum_sinc_r  (x.re, x.im, cres) return   cres[0] end

M.angle = \x,y -> _C.mad_cnum_arg_r(y.re, y.im) - _C.mad_cnum_arg_r(x.re, x.im)

M.erf   = \x,tol => _C.mad_cnum_erf_r  (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfc  = \x,tol => _C.mad_cnum_erfc_r (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfi  = \x,tol => _C.mad_cnum_erfi_r (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfw  = \x,tol => _C.mad_cnum_erfw_r (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfcx = \x,tol => _C.mad_cnum_erfcx_r(x.re, x.im, tol or 0, cres) return cres[0] end

M.tgamma = \x,tol -> error('NYI')
M.lgamma = \x,tol -> error('NYI')

-- complex generic functions
M.carg  = \x -> _C.mad_cnum_arg_r (x.re, x.im)
M.real  = \x -> x.re
M.imag  = \x -> x.im
M.conj  = \x -> complex(x.re, -x.im)
M.proj  = \x => _C.mad_cnum_proj_r  (x.re, x.im, cres) return cres[0] end
M.rect  = \x => _C.mad_cnum_rect_r  (x.re, x.im, cres) return cres[0] end
M.polar = \x => _C.mad_cnum_polar_r (x.re, x.im, cres) return cres[0] end

-- complex non-generic functions
M.unit  = \x => _C.mad_cnum_unit_r  (x.re, x.im, cres) return cres[0] end

-- complex operators
function M.__unm (x)
  return complex(-x.re, -x.im)
end

function M.__add (x, y, r_)
  if is_number(x) then                           -- num + cpx
    return complex(x + y.re, y.im)
  elseif is_number(y) then                       -- cpx + num
    return complex(x.re + y, x.im)
  elseif is_complex(y) and is_complex(x) then    -- cpx + cpx
    return complex(x.re + y.re, x.im + y.im)
  elseif has_method(y,'__radd_cpx') then         -- cpx + ?
    return y:__radd_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '+')")
end

function M.__sub (x, y, r_)
  if is_number(x) then                           -- num - cpx
    return complex(x - y.re, - y.im)
  elseif is_number(y) then                       -- cpx - num
    return complex(x.re - y, x.im)
  elseif is_complex(y) and is_complex(x) then    -- cpx - cpx
    return complex(x.re - y.re, x.im - y.im)
  elseif has_method(y,'__rsub_cpx') then         -- cpx - ?
    return y:__rsub_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '-')")
end

function M.__mul (x, y, r_)
  if is_number(x) then                           -- num * cpx
    return complex(x * y.re, x * y.im)
  elseif is_number(y) then                       -- cpx * num
    return complex(x.re * y, x.im * y)
  elseif is_complex(y) and is_complex(x) then    -- cpx * cpx
    return complex(x.re*y.re - x.im*y.im, x.re*y.im + x.im*y.re)
  elseif has_method(y,'__rmul_cpx') then         -- cpx * ?
    return y:__rmul_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '*')")
end

function M.__emul (x, y, r_)
  if has_method(y,'__remul_cpx') then            -- cpx .* ?
    return y:__remul_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '.*'')")
end

function M.__div (x, y, r_, rcond_)
  if is_number(x) then                           -- num / cpx
    _C.mad_cnum_div_r(x, 0, y.re, y.im, cres) return cres[0]
  elseif is_number(y) then                       -- cpx / num
    return complex(x.re / y, x.im / y)
  elseif is_complex(y) and is_complex(x) then    -- cpx / cpx
    _C.mad_cnum_div_r(x.re, x.im, y.re, y.im, cres) return cres[0]
  elseif has_method(y,'__rdiv_cpx') then         -- cpx / ?
    return y:__rdiv_cpx(x, r_, rcond_)
  end
  error("invalid arguments (unsupported complex operation '/')")
end

function M.__ediv (x, y, r_)
  if has_method(y,'__rediv_cpx') then            -- cpx ./ ?
    return y:__rediv_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation './')")
end

function M.__mod (x, y, r_)
  if is_scalar(y) then                           -- cpx|num % cpx|num
    x, y = complex(x), complex(y)
    _C.mad_cnum_mod_r(x.re, x.im, y.re, y.im, cres) return cres[0]
  elseif has_method(y,'__rmod_cpx') then         -- cpx % ?
    return y:__rmod_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '%')")
end

function M.__emod (x, y, r_)
  if has_method(y,'__remod_cpx') then            -- cpx .% ?
    return y:__remod_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '.%'')")
end

function M.__pow (x, y, r_)
  if is_integer(y) then
    if y == 2 then return x*x  end -- common case
    if y == 1 then return x    end -- stupid cases
    if y == 0 then return 1+0i end
    _C.mad_cnum_powi_r(x.re, x.im, y, cres) return cres[0]
  elseif is_scalar(y) then                       -- cpx|num ^ cpx|num
    x, y = complex(x), complex(y)
    _C.mad_cnum_pow_r(x.re, x.im, y.re, y.im, cres) return cres[0]
  elseif has_method(y,'__rpow_cpx') then         -- cpx ^ ?
    return y:__rpow_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '^')")
end

function M.__epow (x, y, r_)
  if has_method(y,'__repow_cpx') then            -- cpx .^ ?
    return y:__repow_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation '.^')")
end

function M.__eq (x, y, tol_)
  tol_ = tol_ or 0
  assert(is_number(tol_), "invalid argument #3 (number expected)")
  if is_scalar(y) then                           -- cpx|num == cpx|num
    x, y = complex(x), complex(y)
    if tol_ == 0 then
      return x.re == y.re and x.im == y.im
    else
      return abs(x.re - y.re) <= tol_ and abs(x.im - y.im) <= tol_
    end
  elseif has_method(y,'__req_cpx') then          -- cpx == ?
    return y:__req_cpx(x, tol_)
  end
  error("invalid arguments (unsupported complex operation '==')")
end

function M.__tostring (x)
  if x.im < 0
  then return num2str(x.re) ..'-'.. strtrim(num2str(abs(x.im))) ..'i'
  else return num2str(x.re) ..'+'.. strtrim(num2str(abs(x.im))) ..'i'
  end
end

local code_i = string.byte('i')
local code_I = string.byte('I')

local function tocomplex (str)
  assert(is_string(str), "invalid argument #1 (string expected)")
  local re, im, ni, cpx, _
  re, _, ni = strnum(str, 1) ; if ni == 0 then return nil end -- not a number
  re = tonumber(re) ; cpx = string.byte(str,ni)
  if not cpx then return complex(re) end                      -- real
  if cpx == code_i or cpx == code_I then                      -- imaginary
    return complex(0, re)
  end
  im, _, ni = strnum(str,ni) ; if ni == 0 then return nil end -- not a number
  im = tonumber(im) ; cpx = string.byte(str,ni)
  if cpx == code_i or cpx == code_I then                      -- complex
    return complex(re, im)
  end
  return nil                                                  -- not a complex
end

-- Note: cdata semantic doesn't allow to use directly table as index safely
M.__index    = \_,k -> M[k]
M.__newindex = \_,k -> error("invalid complex member '".. tostring(k) .."'", 2)
M.__copy     = \x   -> x
M.__same     = \x   -> x

M.  unm, M.  add, M.  sub, M.  mul, M.  div, M.  mod, M.  pow, M.  eq, M.  same, M.  copy =
M.__unm, M.__add, M.__sub, M.__mul, M.__div, M.__mod, M.__pow, M.__eq, M.__same, M.__copy

M.  emul, M.  ediv, M.  emod, M.  epow =
M.__emul, M.__ediv, M.__emod, M.__epow

-- env ------------------------------------------------------------------------o

MAD.typeid.is_complex = is_complex
MAD.typeid.is_scalar  = is_scalar

-- metatable ------------------------------------------------------------------o

M.__metatable = M

ffi.metatype(complex, M)

-- end ------------------------------------------------------------------------o
return {
  complex   = complex,
  tocomplex = tocomplex,
  -- __help  = require 'madh_complex',
}
