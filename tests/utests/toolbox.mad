--[=[
 o-----------------------------------------------------------------------------o
 |
 | MAD test suites toolbox
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide common tools for test suites of the MAD application

 o-----------------------------------------------------------------------------o
]=]

-- load utest module (not implicit)
MAD:import( 'utest' )

local is_sequence                                                  in MAD.typeid
local assertEquals, assertNil                                      in MAD.utest
local seqdir = \s -> '../share/'..s

local toolbox = {}

function toolbox.loadLHC()
  if not is_sequence(MADX:var_raw'lhcb1') then -- avoid warning
    MADX:load(seqdir('LHC/lhc_undef.mad'   ))
    MADX:load(seqdir('LHC/lhc_as-built.mad'))

    assert(loadfile(seqdir('LHC/lhc_setup.mad' )), "unable to load the LHC setup")()

    local lhcb1, lhcb2 in MADX
    assert(#lhcb1 == 6677, "invalid number of elements in LHCB1 (6677 expected)")
    assert(#lhcb2 == 6676, "invalid number of elements in LHCB2 (6676 expected)")
    jit.flush()
  end

  return MADX.lhcb1, MADX.lhcb2
end

function toolbox.loadFiveCell()
  if not is_sequence(MADX:var_raw'fivecell') then
    MADX:load(seqdir('FiveCell/fivecell_undef.mad'))
    MADX:load(seqdir('FiveCell/fivecell.mad'      ))

    assert(loadfile(seqdir('FiveCell/fivecell_setup.mad' )), "unable to load the FiveCell setup")()

    local fivecell in MADX
    assert(#fivecell == 81, "invalid number of elements in FiveCell (81 expected)")
  end

  return MADX.fivecell
end

function toolbox.check_kpairs(tbl, print_)
  local ktbl, itbl, ptbl = {}, {}, {}
  local i, j, k, l, i2, j2, k2 = 0, 0, 0, 0, 0, 0, 0
  if print_ then print("======== ipairs") end
  for key,val in ipairs(tbl) do
    if print_ then print(key, val) end
    itbl[key]=val
    i = i + 1
  end
  if print_ then print("======== kpairs") end
  for key,val in MAD.utility.kpairs(tbl) do
    if print_ then print(key, val) end
    ktbl[key]=val
    j = j + 1
  end
  if print_ then print("======== pairs") end
  for key,val in  pairs(tbl) do
    if print_ then print(key, val) end
    ptbl[key]=val
    k = k + 1
  end
  assertEquals(i+j, k)

  for key,val in pairs(itbl) do
    assertEquals(val, ptbl[key])
    assertNil(ktbl[key])
    ptbl[key] = nil
    i2=i2+1
  end
  assertEquals(i2, i)

  for key,val in pairs(ktbl) do
    assertEquals(val, ptbl[key])
    assertNil(itbl[key])
    ptbl[key] = nil
    j2=j2+1
  end
  assertEquals(j2, j)

  for key,val in pairs(ptbl) do l=l+1 end
  assertEquals(l, 0)
end

return toolbox
