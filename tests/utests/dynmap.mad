--[=[
 o-----------------------------------------------------------------------------o
 |
 | Dynmap tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the dynmap module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local sequence, beam, track, plot, option, filesys               in MAD
local drift_element, thick_element, thin_element, marker         in MAD.element
local eps, pi                                                    in MAD.constant
local openfile                                                   in MAD.utility

local refdir = \s -> 'dynmap_ref/'..(s or '')
local rundir = \s -> 'dynmap_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot -- = true

if doplot then
  MAD.atexit(MAD.utility.pause, true)
end

local function plot (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = { s={'x','px','y','py','t','pt'} } }
end

local function plotxy (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, x1y1 = { x='px', y='py'} }
end

local function plott (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = {'x','px','y','py','t','pt'} }
end

-- regression test suite ------------------------------------------------------o

-- TODO: vary parameters nst, lw, sdir, tdir, s0, X0 ...

TestDynmap = {}

function TestDynmap:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.format
  option.format = "%-.10g"
end

function TestDynmap:tearDown ()
  option.format = self.optfmt
end

function TestDynmap:testDrift ()
  local nst = 20
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local seq = sequence 'seq' { nst * drift_element{ l=1 } }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='drift' }

  tbl:write(rundir('dynmap_drift'))
  plotxy(tbl)

  assertEquals(#tbl, nst+2)
  local s, x, px, y, py, t, pt in tbl[#tbl]
  assertAllAlmostEquals({  s,    x,   px,    y,   py,      t, pt},
                        {nst, 2e-5, 1e-6, 2e-7, 1e-8, -1e-11,  0},
                        {  0,  eps,  eps,  eps,  eps,  5*eps,  0} )
end

function TestDynmap:testThinFODO ()
  local nsl = 10
  local dl  = 1/nsl
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107
  local mq1 = thin_element 'mq1' { knl := {0,  k1l/nsl} }
  local mq2 = thin_element 'mq2' { knl := {0, -k1l/nsl} }
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2}, (nsl-1)*mq1 {at=dl, from='prev'},
                mq2 {at=5+dl/2}, (nsl-1)*mq2 {at=dl, from='prev'},
              }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='thinfodo', mapdef=true, mapsave=true,
                      implicit=false, atslice=\e,m,l,i -> i==0 and m.fill(e,m,l)}

  for i=1,6 do
  for j=1,6 do
    tbl:addcol(('re'..i)..j, \r -> tbl.map[r][i]:get(j+1))
  end end

  tbl:write(rundir('dynmap_thinfodo'))

  assertEquals(#tbl, 42)
  local s, x, px, y, py, t, pt in tbl[#tbl]
  assertAllAlmostEquals({ s, x, px, y, py, t, pt},
  --[[from MADX Twiss]] {10, 1.543323861e-05, 2.375333367e-06, 3.316704929e-08, -6.538000521e-09, -1.452572329e-11, 0},
                        { 0, 12*eps, 3*eps, 2*eps, eps, 3*eps, eps} )

--  local file = openfile(rundir('map.dat'), 'w', '.dat')
--  for i=1,#tbl do
--    file:write("**** [", i, "]: ", tbl[i].name, ", ", tbl[i].s, "\n")
--    tbl[i].map. x:write(file)
--    tbl[i].map.px:write(file)
--    tbl[i].map. y:write(file)
--    tbl[i].map.py:write(file)
--    tbl[i].map. t:write(file)
--    tbl[i].map.pt:write(file)
--  end
end

function TestDynmap:testCOThinFODO ()
  local nsl = 10
  local dl  = 1/nsl
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107
  local mq1 = thin_element 'mq1' { knl := {0,  k1l/nsl} }
  local mq2 = thin_element 'mq2' { knl := {0, -k1l/nsl} }
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2}, (nsl-1)*mq1 {at=dl, from='prev'},
                mq2 {at=5+dl/2}, (nsl-1)*mq2 {at=dl, from='prev'},
              }

  local X, R, rank, type, iter
--  local nloop, t0 = 1000, os.clock()

--  for i=1,nloop do
  X, R, rank, type, iter = MAD.cofind{sequence=seq, beam=beam, X0=X0, cousemap=true}
--  end

  -- TODO: 6D case
  assertEquals(rank, 4)
  assertEquals(iter, 2)
  assertEquals(type, "4D")
  assertAllAlmostEquals(X:totable(), 0, eps)

--  if status ~= "singular" then
--    local t1 = os.clock()
--    print('thin fodo: converged in ', iter, 'iterations, with ', nloop/(t1-t0), 'co/sec')
--    CO:print('CO')
--  end
end


function TestDynmap:testTwissThinFODO ()
  local nsl = 10
  local dl  = 1/nsl
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107
  local mq1 = thin_element 'mq1' { knl := {0,  k1l/nsl} }
  local mq2 = thin_element 'mq2' { knl := {0, -k1l/nsl} }
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2}, (nsl-1)*mq1 {at=dl, from='prev'},
                mq2 {at=5+dl/2}, (nsl-1)*mq2 {at=dl, from='prev'},
              }

  local X, R, rank, type, iter
--  local nloop, t0 = 1000, os.clock()

--  for i=1,nloop do
  local mtbl, mflw = MAD.twiss{sequence=seq, beam=beam, X0=X0}
--  end

  -- TODO: 6D case
--  assertEquals(rank, 4)
--  assertEquals(iter, 2)
--  assertEquals(type, "4D")
--  assertAllAlmostEquals(X:totable(), 0, eps)
end

function TestDynmap:testThickFODO ()
  local nsl = 10
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107 -- from MADX
  local mq1 = thick_element 'mq1' { l=1, knl := {0,  k1l} }
  local mq2 = thick_element 'mq2' { l=1, knl := {0, -k1l} }
  local seq = sequence 'seq' { l=10, refer='entry', mq1 {at=0}, mq2 {at=5} }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='thinfodo',
                      implicit=false, nslice=nsl, atslice=\e,m,l -> m.fill(e,m,l)}

  tbl:write(rundir('dynmap_thickfodo'))
--  plott(tbl)

--  assertEquals(#tbl, 54)
--  local s, x, px, y, py, t, pt in tbl[#tbl]
--  assertAllAlmostEquals({  s, x, px, y, py, t, pt},
--      --[[from MADX]]   { 10, 1.759885023e-05, 2.519770046e-06, 2.401149771e-08, -5.197700457e-09, -1.837374937e-11, 2.220446049e-16},
--                        {  0, 2.5e-15, 5e-16, eps, eps, eps, eps} )
end

function TestDynmap:testThickFODOTeapot ()
  local nsl = 10
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3039603842 -- from MADX
  local mq1 = thick_element 'mq1' { l=1, knl := {0,  k1l} }
  local mq2 = thick_element 'mq2' { l=1, knl := {0, -k1l} }
  local seq = sequence 'seq' { l=10, refer='entry', mq1 {at=0}, mq2 {at=5} }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='thinfodo', method='teapot',
                      implicit=false, nslice=nsl, atslice=\e,m,l -> m.fill(e,m,l)}

  tbl:write(rundir('dynmap_thickfodoteapot'))
--  plott(tbl)

--  assertEquals(#tbl, 54)
--  local s, x, px, y, py, t, pt in tbl[#tbl]
--  assertAllAlmostEquals({  s, x, px, y, py, t, pt},
--      --[[from MADX]]   { 10, 1.759885023e-05, 2.519770046e-06, 2.401149771e-08, -5.197700457e-09, -1.837374937e-11, 2.220446049e-16},
--                        {  0, 2.5e-15, 5e-16, eps, eps, eps, eps} )
end

-- end ------------------------------------------------------------------------o
